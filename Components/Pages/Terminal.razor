@page "/"
@rendermode InteractiveServer
@using TerminalBlazor.Services

<style>
    .terminal {
        background-color: black;
        color: green;
        font-family: 'Lucida Console', monospace;
        height: 100vh;
        padding: 20px;
        white-space: pre-wrap;
    }
    .input {
        color: white;
        outline: none;
        border: none;
        background: none;
        font-family: 'Lucida Console', monospace;
    }
    .terminal:focus {
        outline: none;
    }
    .blinking-cursor::after {
        content: ' ';
        display: inline-block;
        width: 10px;
        background-color: green;
        animation: blink 1s step-end infinite;
    }
    @@keyframes blink {
        from, to {
            background-color: transparent;
        }
        50% {
            background-color: green;
        }
    }
</style>

<div class="terminal" tabindex="0" @onkeydown="HandleKeyDown" @ref="terminalDiv">
    @foreach (var line in terminalLines)
    {
        <div> @line</div>
    }
    <div>
        <span>root@machine:/root# </span><span class="blinking-cursor">@userInput</span>
    </div>
</div>

@code {
    private string prompt = "root@machine:/root# ";
    private string userInput = string.Empty;
    private List<string> terminalLines = new List<string>();
    private ElementReference terminalDiv;

    private readonly Dictionary<string, Action> commandHandlers;

    public Terminal()
    {
        commandHandlers = new Dictionary<string, Action>
        {
            { "clear", () => TerminalFunctions.Clear(terminalLines, ref userInput) },
            { "help", () => TerminalFunctions.Help(terminalLines, ref userInput) }
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            terminalDiv.FocusAsync();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            terminalLines.Add(prompt + userInput);
            if (commandHandlers.TryGetValue(userInput, out var handler))
            {
                handler();
            }
            else
            {
                userInput = string.Empty;
                terminalLines.Add(string.Empty); // Add a new line
            }
        }
        else if (e.Key == "Backspace")
        {
            if (userInput.Length > 0)
            {
                userInput = userInput.Substring(0, userInput.Length - 1);
            }
        }
        else if (e.Key.Length == 1 && char.IsLetterOrDigit(e.Key[0])) // Check if the key is a single letter or digit
        {
            userInput += e.Key;
        }
    }
}

